const express = require('express'); 
// Import the Express framework to create a web server.

const app = express(); 
// Create an instance of an Express application.

const fs = require('fs'); 
// Import the 'fs' module to work with the file system (not used in this code yet).

app.set('view engine','ejs'); 
// Set EJS as the template engine for rendering views.

app.use(express.json()); 
// Middleware to parse incoming JSON requests.

app.use(express.urlencoded({extended : true})); 
// Middleware to parse URL-encoded data (e.g., form submissions).

const path = require('path'); 
// Import the 'path' module to work with file and directory paths.

app.use(express.static(path.join(__dirname,'public1'))); 
// Serve static files (like CSS, JS, images) from the 'public1' directory.

app.get('/', (req, res) => { 
    fs.readdir(`./files`, function(err, files) {
        // Use the 'fs.readdir' method to read the contents of the './files' directory.
        // The callback function will be called with the list of files in the directory.

        res.render('index1', {files: files});
        // Render the 'index1.ejs' view, passing the list of files as a variable.
    });
});

app.post('/create', (req, res) => { 
    // Define a POST route for the '/create' endpoint.

    fs.writeFile(`./files/${req.body.title.split(' ').join('_')}.txt`, req.body.details, function(err) {
        // Use the 'fs.writeFile' method to create a new file in the './files/' directory.
        // The file name is generated by taking the 'title' field from the form, replacing spaces with underscores.
        // The file content is taken from the 'details' field of the form.

        res.redirect('/');
        // After saving the file, redirect the user back to the root URL ('/').
    });   
    // If there's an error during file creation, it will be passed to the callback function (not handled here).
});

app.get('/files/:filename',function (req, res) {
    fs.readFile(`./files/${req.params.filename}`, "utf-8", function (err, filedata) {
        // Use the 'fs.readFile' method to read the content of the specified file.
        // The file name is captured from the URL using the 'req.params.filename' parameter.

        res.render('show', { filename: req.params.filename, filedata: filedata });
        // Render the 'show.ejs' view, passing the file name and content as variables.

        
    });
});

// app.get('/read/:filename', (req, res) => {
//     // Define a GET route for '/read/:filename'.
//     // ':filename' is a route parameter that will capture the file name from the URL.

//     const filePath = path.join(__dirname, 'files', req.params.filename); 
//     // Construct the full file path by combining the current directory, 'files' folder, and the file name from the URL.

//     fs.readFile(filePath, 'utf8', (err, data) => {
//         // Use 'fs.readFile' to read the content of the file at the specified path.
//         // The 'utf8' encoding ensures the file content is read as text.

//         if (err) {
//             // If there's an error (e.g., file not found), send a 404 status with an error message.
//             return res.status(404).send('File not found');
//         }

//         res.send(`<pre>${data}</pre>`); 
//         // If the file is successfully read, send its content wrapped in a <pre> tag for better formatting in the browser.
//     });
// });

app.get('/edit/:filename',function (req, res) {
    res.render('edit', { filename: req.params.filename });  // Render the 'edit.ejs' view, passing the file name as a variable. 
});

app.post('/edit',function (req, res) {
    fs.rename(`./files/${req.body.previous}`,`./files/${req.body.new}` ,function(err) {
        
        res.redirect('/');
    });
});
app.listen(3000); 
// Start the server and listen on port 3000 for incoming requests.